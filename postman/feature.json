{
	"info": {
		"_postman_id": "97df28cc-5778-40a5-b9ae-64ee871974be",
		"name": "My feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24584633"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Обновляем комментарий пустым запросом (без полей)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
									"        comment = rnd.getCommentError();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление комментария с пустым телом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let event;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        await api.publishEvent(event.id)",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"        pm.collectionVariables.set(\"name\", user.name);",
									"    ",
									"        comment = rnd.getCommentError();",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments?userId={{uid}}&eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление комментария без передачи обязательного параметра",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments?userId={{uid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Обновление комментария c пустым body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
									"        comment = rnd.getCommentError();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"        pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Создание нового комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id)\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"    \r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const vari = pm.collectionVariables.get('name');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, owner, text, date, event\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('owner');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('date');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'текст комментария должно соответствовать тексту в запросе');\r",
									"    pm.expect(target.owner.name).equal(vari, 'owner должет соответствовать user.name');\r",
									"    pm.expect(target.date).to.be.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments?userId={{uid}}&eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Получить комментарий по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const vari = pm.collectionVariables.get('name');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, owner, text, date, event\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('owner');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('date');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.date).to.not.be.null;\r",
									"    pm.expect(target.commentId) == (pm.collectionVariables.get(\"commentId\"), 'id комментария должен соответствовать тому, который был запрошен');\r",
									"    pm.expect(target.text).equal(pm.collectionVariables.get(\"text\"), 'текст комментария должно соответствовать тексту в запросе');\r",
									"    pm.expect(target.owner.name).equal(pm.collectionVariables.get(\"name\"), 'Имя создателя должно быть такое же, как в запросе');\r",
									"    pm.expect(target.event.id) == (pm.collectionVariables.get(\"eid\"), 'id собыдия должен быть такой же, как в событии');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id)\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"\r",
									"        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"        pm.collectionVariables.set(\"text\", comment.text)\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id)\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Получить все комментарии события по его id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser())\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id)\r",
									"\r",
									"        pm.collectionVariables.set(\"eid\", event.id); \r",
									"\r",
									"        await api.addComment(rnd.getComment(), user1.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"        await api.addComment(rnd.getComment(), user2.id, event.id);\r",
									"       \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const vari = pm.collectionVariables.get('eid');\r",
									"\r",
									"pm.test(\"В ответе должно быть 15 комментариев\", function () {\r",
									"    pm.expect(target.length).to.eql(15);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/event/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление своего комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id)\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id); \r",
									"\r",
									"        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
									"\r",
									"        const foundedComment = await api.findCommentById(event.id, comment.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"        pm.collectionVariables.set(\"text\", comment.text);\r",
									"        pm.collectionVariables.set(\"response\", foundedComment)\r",
									"        // pm.request.removeQueryParams(['eventId']);\r",
									"        // pm.request.addQueryParams([`eventId=` + event.id]);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const vari = pm.collectionVariables.get('name');\r",
									"const vareid = pm.collectionVariables.get('eid');\r",
									"\r",
									"pm.test(\"комментарий до удаления должно содержать поля: id, owner, text, date, event\", function () {\r",
									"pm.expect(source).to.have.property('id'); \r",
									"pm.expect(source).to.have.property('owner');\r",
									"pm.expect(source).to.have.property('text');\r",
									"pm.expect(source).to.have.property('date');\r",
									"pm.expect(source).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные до удаления должны соответствовать данным в запросе до выполнение запроса на удаление\", function () {\r",
									"    pm.expect(source.id).to.not.be.null;\r",
									"     pm.expect(source.text).equal(pm.collectionVariables.get(\"text\"), 'текст комментария должно соответствовать тексту в запросе');\r",
									"    pm.expect(source.owner) == (vari, 'owner должет соответствовать user.name');\r",
									"    pm.expect(source.date).to.not.be.null;\r",
									"    pm.expect(source.event.id) == (vareid);\r",
									"});\r",
									"\r",
									"let body\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + pm.collectionVariables.get(\"commentId\"),\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление любого комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id)\r",
									"        const comment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"        const foundedComment = await api.findCommentById(event.id, comment.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
									"        pm.collectionVariables.set(\"text\", comment.text);\r",
									"        pm.collectionVariables.set(\"response\", foundedComment)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const vareid = pm.collectionVariables.get('name');\r",
									"\r",
									"pm.test(\"комментарий до удаления должно содержать поля: id, owner, text, date, event\", function () {\r",
									"pm.expect(source).to.have.property('id');\r",
									"pm.expect(source).to.have.property('owner');\r",
									"pm.expect(source).to.have.property('text');\r",
									"pm.expect(source).to.have.property('event');\r",
									"pm.expect(source).to.have.property('date');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные до удаления должны соответствовать данным в запросе до выполнение запроса на удаление\", function () {\r",
									"    pm.expect(source.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(pm.collectionVariables.get(\"text\"), 'текст комментария должно соответствовать тексту в запросе');\r",
									"    pm.expect(source.owner) == (vareid, 'owner должет соответствовать user.name');\r",
									"    pm.expect(source.date).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"let body\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + pm.collectionVariables.get(\"commentId\"),\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/admin/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"admin",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Обновление своего комментария пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"name\", user.name);\r",
									"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
									"        pm.collectionVariables.set(\"commentText\", updateComment.text);\r",
									"        pm.request.removeQueryParams(['userId']);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"const vari = pm.collectionVariables.get('name');\r",
									"\r",
									"pm.test(\"Коммнетарий должен содержать поля: id, owner, text, created, updated, changedBy\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('owner');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('date');\r",
									"pm.expect(target).to.have.property('event');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные до удаления должны соответствовать данным в запросе до выполнение запроса на удаление\", function () {\r",
									"    pm.expect(source.id).to.not.be.null;\r",
									"    pm.expect(source.owner) == (vari, 'owner должет соответствовать user.name');\r",
									"    pm.expect(source.date).to.not.be.null;\r",
									"});\r",
									"\r",
									"let body\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + /comments/ + pm.collectionVariables.get(\"commentId\"),\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Комментарий должен обновиться\", function () {\r",
									"                pm.expect(response.json().text).to.eql(source.text);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		},
		{
			"name": "404 Not Found",
			"item": [
				{
					"name": "Private",
					"item": [
						{
							"name": "Добавление комментария от несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id)\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"name\", user.name);\r",
											"        pm.request.removeQueryParams(['userId']);\r",
											"        pm.request.addQueryParams([`userId=` + 999]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments?userId={{uid}}&eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Добавление комментария в несуществующее событие",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id)\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"name\", user.name);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + 999]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments?userId={{uid}}&eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Удаление комментария несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
											"        pm.collectionVariables.set(\"uid\", 999999);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"name\", user.name);\r",
											"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":commentId",
										"user",
										":userId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										},
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Попытка обновить чужой комментарий несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
											"        pm.collectionVariables.set(\"uid\", 999999);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"name\", user.name);\r",
											"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":commentId",
										"user",
										":userId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										},
										{
											"key": "userId",
											"value": "999999"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Попытка удаление комментария от несуществующего пользователя",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const updateComment = await api.addComment(rnd.getComment(), user.id, event.id);\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"name\", user.name);\r",
											"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":commentId",
										"user",
										":userId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										},
										{
											"key": "userId",
											"value": "999999"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Удаление несуществующего комментария администратором",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/admin/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"admin",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "999999"
										}
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "409 Conflict",
			"item": [
				{
					"name": "Попытка обновить чужой комментарий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const updateComment = await api.addComment(rnd.getComment(), user1.id, event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Удаление пользователем чужого комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const updateComment = await api.addComment(rnd.getComment(), user1.id, event.id);\r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        pm.collectionVariables.set(\"commentId\", updateComment.id);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addComment(comment, uid, eid, verbose=null) {",
					"        return this.post('/comments?userId='+ uid + '&eventId=' + eid, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async addCommentError(comment, uid, eid, verbose=null) {",
					"        return this.post('/comments?userId='+ uid, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async addCommentEventWrong(comment, uid, eid, verbose=null) {",
					"        return this.post('/comments?userId='+ uid + '&eventId=' + 999999, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async patchCommentAdmin(commentId, comment, verbose=null) {",
					"        return this.patch('/admin/comments/' + commentId , comment, \"Ошибка при обновлении комментария админом: \", verbose);",
					"    }",
					"",
					"    async findCommentById(eventId, commentId,  verbose=null) {",
					"        return this.get('/comments/' + commentId, \"Ошибка при запросе комментария: \", verbose)",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"        };",
					"    }",
					"",
					"    getCommentError() {",
					"        return {",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Willard Jerde"
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 2,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": 78
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "commentId",
			"value": 2,
			"type": "string"
		},
		{
			"key": "variable",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "text",
			"value": "Amet perspiciatis est. Dicta veniam quod optio perferendis sunt quod neque. Rem consequatur similique perspiciatis omnis. Cumque qui culpa quasi. Sapiente sed ut illum nobis delectus incidunt aut.\n \rSint molestiae consequatur. Voluptatem ullam ut rem nihil amet magni. Occaecati voluptas vero corrupti ut doloribus.\n \rVelit quidem blanditiis. Quidem beatae iure illum. Non fuga itaque eos velit dolores quisquam. Amet et qui enim corporis qui ut. Aliquam consequatur voluptas nulla reiciendis qui reprehenderit omnis error et. Quos consequatur atque quod dolore molestiae quo voluptas quia.",
			"type": "string"
		},
		{
			"key": "etitle",
			"value": ""
		},
		{
			"key": "uid",
			"value": 2
		},
		{
			"key": "uid2",
			"value": 79
		},
		{
			"key": "commentText",
			"value": ""
		}
	]
}